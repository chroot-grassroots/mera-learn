/*
 * Auto-generated Complete Registry for TypeScript Bundling
 * Generated on: 2025-09-29T06:11:33.241170
 * 
 * This file contains ALL 11 mappings and parsed YAML data.
 * Gets bundled into mera-app.js via TypeScript compilation.
 * 
 * This file is automatically generated by dev/py/registry_builder.py
 * Do not edit manually - your changes will be overwritten
 */

import { z } from 'zod';
import type { BaseComponent } from '../components/baseComponent.js';

import { 
    BasicTaskProgressManager, 
    BasicTaskComponentConfigSchema, 
    BasicTaskComponentProgressSchema
} from '../components/cores/basicTaskCore.js';

export interface ComponentRegistration {
    componentClass: typeof BaseComponent;
    configSchema: z.ZodType<any>;
    progressSchema: z.ZodType<any>;
    typeName: string;
}

export interface LessonMetrics {
    pageCount: number;
    componentCount: number;
    title: string;
    difficulty: string;
}

/**
 * MAPPING 1: Component Registrations
 * Array of all component registrations with classes and schemas
 */
export const componentRegistrations: ComponentRegistration[] = [
    {
        componentClass: BasicTaskProgressManager,
        configSchema: BasicTaskComponentConfigSchema,
        progressSchema: BasicTaskComponentProgressSchema,
        typeName: 'basic_task'
    }
];

/**
 * MAPPING 2: Component Type Map
 * Maps component type string to component class
 */
export const componentTypeMap = new Map<string, typeof BaseComponent>([
    ["basic_task", BasicTaskProgressManager]
]);

/**
 * MAPPING 3: Config Schema Map
 * Maps component type string to config schema
 */
export const configSchemaMap = new Map<string, z.ZodType<any>>([
    ["basic_task", BasicTaskComponentConfigSchema]
]);

/**
 * MAPPING 4: Progress Schema Map
 * Maps component type string to progress schema
 */
export const progressSchemaMap = new Map<string, z.ZodType<any>>([
    ["basic_task", BasicTaskComponentProgressSchema]
]);

/**
 * MAPPING 5: All Lesson IDs
 * Set of all valid lesson IDs in the system
 */
export const allLessonIds = [12345];

/**
 * MAPPING 6: All Component IDs
 * Set of all component IDs used across all lessons
 */
export const allComponentIds = [123456, 123457];

/**
 * MAPPING 7: Lesson Metrics Map
 * Maps lesson ID to metrics (page count, component count, etc.)
 */
export const lessonMetrics = new Map<number, LessonMetrics>([
    [12345, { pageCount: 2, componentCount: 2, title: "Phishing Recognition Basics", difficulty: "beginner" }]
]);

/**
 * MAPPING 8: Domain-Lesson Map
 * Maps domain ID to array of lesson IDs in that domain
 */
export const domainLessonMap = new Map<number, number[]>([
    [1001, [12345]]
]);

/**
 * MAPPING 9: Curriculum Data
 * Complete parsed curriculum structure
 */
export const curriculumData = null;

/**
 * MAPPING 10: Domain Data
 * Array of all domain definitions
 */
export const domainData = [];

/**
 * MAPPING 11: Menu Data
 * Array of all menu definitions
 */
export const menuData = [];

/**
 * Lesson metadata for quick access
 */
export const lessonMetadata = [
  {
    "id": 12345,
    "path": "static/yaml/lessons/phishing-basics.yaml",
    "title": "Phishing Recognition Basics",
    "domainId": 1001,
    "pageCount": 2,
    "componentCount": 2,
    "difficulty": "beginner",
    "estimatedMinutes": 8,
    "required": true
  }
];

console.log(`Mera Registry loaded with all 11 mappings:`);
console.log(`  - ${componentRegistrations.length} component types`);
console.log(`  - ${allLessonIds.length} lessons`);
console.log(`  - ${allComponentIds.length} component IDs`);
console.log(`  - ${domainLessonMap.size} domains`);
console.log(`  - ${menuData.length} menus`);
